using System;
using UnityEngine;


///---------------------------------------------------------------------------------
/// <summary>
/// Singleton
/// </summary>
///---------------------------------------------------------------------------------
public class Singleton<T> : MonoBehaviour where T : MonoBehaviour
{
    private static T ms_Instance;
    public static T Instance
    {
        get
        {
            return ms_Instance;
        }
    }

    ///---------------------------------------------------------------------------------
    /// <summary>
    /// インスタンスをセット
    /// </summary>
    ///
    /// <returns>
    /// 無し
    /// </returns>
    ///---------------------------------------------------------------------------------
    public void SetInstance(T instance)
    {
        ms_Instance = instance;
    }

    ///---------------------------------------------------------------------------------
    /// <summary>
    /// UnityのGameObject用Awake処理
    /// </summary>
    ///
    /// <returns>
    /// 無し
    /// </returns>
    ///---------------------------------------------------------------------------------
    protected virtual void Awake()
    {
        if (ms_Instance == null)
        {
            // 自分をSingletonとして登録する
            SetInstance(this as T);
        }
        else
        {
            Destroy(gameObject);
            Debug.LogWarning("The singleton '" + this.GetType().Name + "' already exits.");
        }
    }


    ///---------------------------------------------------------------------------------
    /// <summary>
    /// UnityのGameObject用Start処理
    /// </summary>
    ///
    /// <returns>
    /// 無し
    /// </returns>
    ///---------------------------------------------------------------------------------
    private void Start()
    {
    }

    ///---------------------------------------------------------------------------------
    /// <summary>
    /// UnityのGameObject用Update処理
    /// </summary>
    ///
    /// <returns>
    /// 無し
    /// </returns>
    ///---------------------------------------------------------------------------------
    private void Update()
    {
    }


    ///---------------------------------------------------------------------------------
    /// <summary>
    /// UnityのGameObject用OnDestroy処理
    /// </summary>
    ///
    /// <returns>
    /// 無し
    /// </returns>
    ///---------------------------------------------------------------------------------
    private void OnDestory()
    {
        // 自分がSingletonなら_Instanceをnullにする
        if (ms_Instance == this)
        {
            ms_Instance = null;
        }
    }

    ///---------------------------------------------------------------------------------
    /// <summary>
    /// Init(初期化処理。最初のMoveの前に呼ばれる)
    /// </summary>
    ///
    /// <returns>
    /// 無し
    /// </returns>
    ///---------------------------------------------------------------------------------
    public virtual void Init()
    {
    }

    ///---------------------------------------------------------------------------------
    /// <summary>
    /// Move(毎フレーム呼ばれる)
    /// </summary>
    ///
    /// <returns>
    /// 無し
    /// </returns>
    ///---------------------------------------------------------------------------------
    public virtual void Move()
    {
    }

    ///---------------------------------------------------------------------------------
    /// <summary>
    /// Move(Moveの後に呼ばれる。いったんMoveAfterだけでやってみる。)
    /// </summary>
    ///
    /// <returns>
    /// 無し
    /// </returns>
    ///---------------------------------------------------------------------------------
    public virtual void MoveAfter()
    {
    }

    ///---------------------------------------------------------------------------------
    /// <summary>
    /// Final(終了処理)
    /// </summary>
    ///
    /// <returns>
    /// 無し
    /// </returns>
    ///---------------------------------------------------------------------------------
    public virtual void Final()
    {
        Destroy(this);
    }

}
